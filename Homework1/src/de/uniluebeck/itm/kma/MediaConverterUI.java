package de.uniluebeck.itm.kma;

import java.io.File;
import java.util.UUID;

import javax.swing.JFrame;
import javax.swing.JFileChooser;
import java.awt.event.ActionEvent;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import de.uniluebeck.itm.kma.xuggler.FileAnalyzer;
import de.uniluebeck.itm.kma.xuggler.FileConverter;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * Simple Media Converter application, as requested in
 * KMA-Lab homework 1.
 *
 * @author seidel
 */
public class MediaConverterUI extends JFrame
{
  /** Logger object for debug output */
  private static final Logger LOGGER = LoggerFactory.getLogger(MediaConverterUI.class);

  /** Input file object */
  private File inputFile = null;

  /** Output file object */
  private File outputFile = null;

  /** FileAnalyzer object */
  private FileAnalyzer fileAnalyzer = null;

  /** FileConverter object */
  private FileConverter fileConverter = null;

  /**
   * Create Media Converter user interface.
   */
  public MediaConverterUI()
  {
    initComponents();

    fileAnalyzer = new FileAnalyzer(LogPane);
    fileConverter = new FileConverter(LogPane);
  }

  /**
   * This method is called from within the constructor to initialize
   * the form.
   *
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the NetBeans form editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    InputFileChooser = new javax.swing.JFileChooser();
    OutputFileChooser = new javax.swing.JFileChooser();
    InputPanel = new javax.swing.JPanel();
    SelectFileButton = new javax.swing.JButton();
    FileNameTextField = new javax.swing.JTextField();
    LogPanel = new javax.swing.JPanel();
    ScrollPane = new javax.swing.JScrollPane();
    LogPane = new javax.swing.JTextPane();
    FileFormatPanel = new javax.swing.JPanel();
    FileFormatComboBox = new javax.swing.JComboBox();
    VolumePanel = new javax.swing.JPanel();
    VolumeSlider = new javax.swing.JSlider();
    SampleRatePanel = new javax.swing.JPanel();
    SampleRateSpinner = new javax.swing.JSpinner();
    SampleRateLabel = new javax.swing.JLabel();
    MenuBar = new javax.swing.JMenuBar();
    FileMenu = new javax.swing.JMenu();
    Open = new javax.swing.JMenuItem();
    Save = new javax.swing.JMenuItem();
    Separator = new javax.swing.JPopupMenu.Separator();
    Exit = new javax.swing.JMenuItem();

    InputFileChooser.setDialogTitle("Open file...");
    InputFileChooser.setFileFilter(new MediaFileFilter());

    OutputFileChooser.setDialogTitle("Save file as...");
    OutputFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
    OutputFileChooser.setFileFilter(new MediaFileFilter());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Media Converter");
    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    setLocationByPlatform(true);
    setMinimumSize(new java.awt.Dimension(793, 493));

    InputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input file"));

    SelectFileButton.setText("Select file...");
    SelectFileButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SelectFileButtonActionPerformed(evt);
      }
    });

    FileNameTextField.setEditable(false);

    javax.swing.GroupLayout InputPanelLayout = new javax.swing.GroupLayout(InputPanel);
    InputPanel.setLayout(InputPanelLayout);
    InputPanelLayout.setHorizontalGroup(
      InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(InputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(FileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
        .addGap(35, 35, 35)
        .addComponent(SelectFileButton)
        .addContainerGap())
    );
    InputPanelLayout.setVerticalGroup(
      InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(InputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(FileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(SelectFileButton))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    LogPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary"));

    LogPane.setEditable(false);
    ScrollPane.setViewportView(LogPane);

    javax.swing.GroupLayout LogPanelLayout = new javax.swing.GroupLayout(LogPanel);
    LogPanel.setLayout(LogPanelLayout);
    LogPanelLayout.setHorizontalGroup(
      LogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(LogPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        .addContainerGap())
    );
    LogPanelLayout.setVerticalGroup(
      LogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(LogPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        .addContainerGap())
    );

    FileFormatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Change file format"));
    FileFormatPanel.setPreferredSize(new java.awt.Dimension(250, 92));

    FileFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".wav", ".mp3", ".mpeg", ".avi", ".mov", ".ogg", ".au", ".mp2", ".mp4" }));

    javax.swing.GroupLayout FileFormatPanelLayout = new javax.swing.GroupLayout(FileFormatPanel);
    FileFormatPanel.setLayout(FileFormatPanelLayout);
    FileFormatPanelLayout.setHorizontalGroup(
      FileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(FileFormatPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(FileFormatComboBox, 0, 207, Short.MAX_VALUE)
        .addContainerGap())
    );
    FileFormatPanelLayout.setVerticalGroup(
      FileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(FileFormatPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(FileFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(31, Short.MAX_VALUE))
    );

    VolumePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjust volume"));
    VolumePanel.setPreferredSize(new java.awt.Dimension(250, 92));

    VolumeSlider.setMajorTickSpacing(50);
    VolumeSlider.setMaximum(200);
    VolumeSlider.setMinorTickSpacing(10);
    VolumeSlider.setPaintLabels(true);
    VolumeSlider.setPaintTicks(true);
    VolumeSlider.setValue(100);
    VolumeSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    javax.swing.GroupLayout VolumePanelLayout = new javax.swing.GroupLayout(VolumePanel);
    VolumePanel.setLayout(VolumePanelLayout);
    VolumePanelLayout.setHorizontalGroup(
      VolumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(VolumePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(VolumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        .addContainerGap())
    );
    VolumePanelLayout.setVerticalGroup(
      VolumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(VolumePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(VolumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(13, Short.MAX_VALUE))
    );

    SampleRatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Change sample rate"));
    SampleRatePanel.setPreferredSize(new java.awt.Dimension(250, 92));

    SampleRateSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"48000", "44100", "32000", "22050", "16000", "11025", "8000"}));

    SampleRateLabel.setText("Hz");

    javax.swing.GroupLayout SampleRatePanelLayout = new javax.swing.GroupLayout(SampleRatePanel);
    SampleRatePanel.setLayout(SampleRatePanelLayout);
    SampleRatePanelLayout.setHorizontalGroup(
      SampleRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SampleRatePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(SampleRateSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(SampleRateLabel)
        .addContainerGap())
    );
    SampleRatePanelLayout.setVerticalGroup(
      SampleRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(SampleRatePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(SampleRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(SampleRateLabel)
          .addComponent(SampleRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(35, Short.MAX_VALUE))
    );

    FileMenu.setText("File");

    Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    Open.setText("Open file...");
    Open.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        OpenActionPerformed(evt);
      }
    });
    FileMenu.add(Open);

    Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    Save.setText("Save file as...");
    Save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SaveActionPerformed(evt);
      }
    });
    FileMenu.add(Save);
    FileMenu.add(Separator);

    Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    Exit.setText("Exit");
    Exit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ExitActionPerformed(evt);
      }
    });
    FileMenu.add(Exit);

    MenuBar.add(FileMenu);

    setJMenuBar(MenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(LogPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(InputPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addComponent(FileFormatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(SampleRatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(VolumePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(InputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(VolumePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(FileFormatPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(SampleRatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addComponent(LogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Action performed, when the "Select file..." button is clicked.
   * We just call OpenFile() in this case, so we do not have to
   * maintain multiple methods for input file handling.
   * 
   * @param evt ActionEvent
   */
    private void SelectFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SelectFileButtonActionPerformed
    {//GEN-HEADEREND:event_SelectFileButtonActionPerformed
      this.OpenFile(evt);
    }//GEN-LAST:event_SelectFileButtonActionPerformed

  /**
   * Action performed, when "Exit" item is selected in file menu.
   * This will close the application and return status code 0.
   * 
   * @param evt ActionEvent
   */
    private void ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitActionPerformed
    {//GEN-HEADEREND:event_ExitActionPerformed
      System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

  /**
   * Action performed, when "Open file..." item is selected in
   * the file menu. Again we just call OpenFile() for better
   * code maintenance.
   *
   * @param evt ActionEvent
   */
    private void OpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OpenActionPerformed
    {//GEN-HEADEREND:event_OpenActionPerformed
      this.OpenFile(evt);
    }//GEN-LAST:event_OpenActionPerformed

  /**
   * This method handles action events from the JFileChooser.
   * It checks whether the returned value is a valid file,
   * loads it and starts file analysis.
   *
   * @param event ActionEvent
   */
  private void OpenFile(ActionEvent event)
  {
    // Get return value from JFileChooser
    int returnValue = InputFileChooser.showOpenDialog(this);

    // Did user open a file?
    if (returnValue == JFileChooser.APPROVE_OPTION)
    {
      this.inputFile = InputFileChooser.getSelectedFile();

      // Check whether file exists
      if (!this.inputFile.exists())
      {
        throw new IllegalArgumentException("Selected input file does not exist.");
      }
      else
      {
        // Set input file name in GUI
        FileNameTextField.setText(this.inputFile.getName());

        // Clear log pane content
        LogPane.setText("");

        // Analyse input file
        fileAnalyzer.analyzeMediafile(this.inputFile.getPath());
      }
    }
  }

  /**
   * Action performed, when "Save file as..." item is selected in
   * the file menu. If a valid file name is provided, media
   * conversion is done and a summary of the output file is
   * written to the log pane.
   *
   * @param evt ActionEvent
   */
    private void SaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SaveActionPerformed
    {//GEN-HEADEREND:event_SaveActionPerformed
      OutputFileChooser.setSelectedFile(this.inputFile);
      int returnValue = OutputFileChooser.showSaveDialog(this);

      // Check whether valid file name was provided
      if (returnValue == JFileChooser.APPROVE_OPTION)
      {
        // Create output file
        outputFile = new File(OutputFileChooser.getSelectedFile().getPath());

        Thread thread = new Thread(new Runnable()
        {
          public void run()
          {
            LOGGER.info("Converter running...");
            MediaConverterUI.this.toggleElementEnabled();

            // Set input file and determine file extension
            String input = MediaConverterUI.this.inputFile.getPath();
            String fileExtension = input.substring(input.lastIndexOf("."));

            // Generate random temporary file names
            String temp1 = MediaConverterUI.this.outputFile.getParent()
                    + (MediaConverterUI.this.outputFile.getParent().endsWith(System.getProperty("file.separator"))
                    ? "" : System.getProperty("file.separator")) + "temp_" + UUID.randomUUID().toString() + fileExtension;
            String temp2 = MediaConverterUI.this.outputFile.getParent()
                    + (MediaConverterUI.this.outputFile.getParent().endsWith(System.getProperty("file.separator"))
                    ? "" : System.getProperty("file.separator")) + "temp_" + UUID.randomUUID().toString() + fileExtension;

            // Set output file name
            String output = MediaConverterUI.this.outputFile.getPath() + FileFormatComboBox.getSelectedItem().toString();

            fileConverter.adjustVolume(input, temp1, VolumeSlider.getValue() / (double)100); // Only cast one value to double!

            int newSampleRate = Integer.valueOf((String)SampleRateSpinner.getValue());
            fileConverter.resampleAudio(temp1, temp2, newSampleRate, 2);

            File f = new File(temp1);
            f.delete();
            fileConverter.transcode(temp2, output);
            f = new File(temp2);
            f.delete();

            // Analyse output file
            fileAnalyzer.analyzeMediafile(output);

            MediaConverterUI.this.toggleElementEnabled();
          }
        });
        //thread.run(); // Run and wait until thread is finished
        thread.start(); // Continue immediately
      }
    }//GEN-LAST:event_SaveActionPerformed

  public void toggleElementEnabled()
  {
    FileNameTextField.setEnabled(!FileNameTextField.isEnabled());
    SelectFileButton.setEnabled(!SelectFileButton.isEnabled());
    SampleRateSpinner.setEnabled(!SampleRateSpinner.isEnabled());
    VolumeSlider.setEnabled(!VolumeSlider.isEnabled());
    FileFormatComboBox.setEnabled(!FileFormatComboBox.isEnabled());
    Open.setEnabled(!Open.isEnabled());
    Save.setEnabled(!Save.isEnabled());
  }

  /**
   * Media Converter application.
   *
   * @param args Command line arguments
   */
  public static void main(String args[])
  {
    try
    {
      for (LookAndFeelInfo info: UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (UnsupportedLookAndFeelException e)
    {
      // handle exception
    }
    catch (ClassNotFoundException e)
    {
      // handle exception
    }
    catch (InstantiationException e)
    {
      // handle exception
    }
    catch (IllegalAccessException e)
    {
      // handle exception
    }

    // Launch application
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new MediaConverterUI().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem Exit;
  private javax.swing.JComboBox FileFormatComboBox;
  private javax.swing.JPanel FileFormatPanel;
  private javax.swing.JMenu FileMenu;
  private javax.swing.JTextField FileNameTextField;
  private javax.swing.JFileChooser InputFileChooser;
  private javax.swing.JPanel InputPanel;
  private javax.swing.JTextPane LogPane;
  private javax.swing.JPanel LogPanel;
  private javax.swing.JMenuBar MenuBar;
  private javax.swing.JMenuItem Open;
  private javax.swing.JFileChooser OutputFileChooser;
  private javax.swing.JLabel SampleRateLabel;
  private javax.swing.JPanel SampleRatePanel;
  private javax.swing.JSpinner SampleRateSpinner;
  private javax.swing.JMenuItem Save;
  private javax.swing.JScrollPane ScrollPane;
  private javax.swing.JButton SelectFileButton;
  private javax.swing.JPopupMenu.Separator Separator;
  private javax.swing.JPanel VolumePanel;
  private javax.swing.JSlider VolumeSlider;
  // End of variables declaration//GEN-END:variables
}
